#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct User{
    int id;
    char name[100];
    int age;
};
int check_id(int user_id){
    FILE *file=fopen("users.txt","r");
    if(file==NULL){
        printf("Error: File is not opening!\n");
        return 0;
    }
    int file_id,age;
    char name[100];
    while(fscanf(file,"%d\t%[^\t]\t%d",&file_id,name,&age)!=EOF){
        if(file_id==user_id) {
            fclose(file);
            return 1;
        }
    }
    fclose(file);
    return 0;
}
int is_digit(char *id_string) {
    int iterator = 0;
    if (id_string[0] == '\0') {
        return 0;
    }
    while (id_string[iterator] != '\0') {
        if (id_string[iterator] < 48 || id_string[iterator] > 57) {
            return 0; 
        }
        iterator++;
    }
    return 1; 
}
int is_alphabet(char *name){
    for(int iterator=0;name[iterator]!='\0';iterator++){
        if(name[iterator]==' ')
            continue;
        if((name[iterator]<'A' || name[iterator]>'Z') && (name[iterator]<'a'||name[iterator]>'z')){
            return 0;
        }
    }
    return 1;
}
int string_to_integer(char *string) {
    int result = 0; 
    int sign = 1; 
    int iterator = 0;
    if (string[0] == '-') {
        sign = -1;
        iterator++;
    }
    while (string[iterator] != '\0') {
        if (string[iterator] < '0' || string[iterator] > '9') {
            return 0; 
        }
        result = result * 10 + (string[iterator] - '0');
        iterator++;
    }
    return result * sign;
}
void create_user(){
    FILE *file=fopen("users.txt","a");
    if(file==NULL){
        printf("Error: File is not opening!\n");
        return;
    }
    struct User user;
    char user_id[100],user_age[100];
    getchar();
    while(1){
        printf("Enter User Id: ");
        scanf("%[^\n]s",user_id);
        if(is_digit(user_id)){
            break;
        }
        else{
            printf("Error: User ID must contain only positive integer!\n");
        }
        while (getchar()!='\n');
    }
    user.id=string_to_integer(user_id);
    if(check_id(user.id)){
        printf("Error: User ID already exists!\n");
        fclose(file);
        return;
    }
    getchar();
    while(1){
        printf("Enter User Name: ");
        scanf("%[^\n]s",user.name);
        if(is_alphabet(user.name)){
            break;
        }
        else{
            printf("Error: Name must contain only alphabets!\n");
        }
        while (getchar()!='\n');
    }
    getchar();
    while(1){
        printf("Enter User Age: ");
        scanf("%[^\n]s",user_age);
        if(is_digit(user_age)){
            break;
        }
        else{
            printf("Error: User Age must contain only positive integer!\n");
        }
        while (getchar()!='\n');
    }
    user.age=string_to_integer(user_age);
    if(user.age<=0){
        printf("Error: User age must be positive and greator then zero!\n");
        fclose(file);
        return;
    }
    fprintf(file,"%d\t%s\t%d\n",user.id,user.name,user.age);
    printf("User added successfully!\n");
    fclose(file);
}
void read_users(){
    FILE *file=fopen("users.txt","r");
    if(file==NULL){
        printf("Error: File is not opening!\n");
        return;
    }
    struct User user;
    while(fscanf(file,"%d\t%[^\t]\t%d",&user.id,user.name,&user.age)!=EOF){
        printf("ID: %d,Name: %s,Age: %d\n",user.id,user.name,user.age);
    }
    fclose(file);
}
void update_user(){
    FILE *file=fopen("users.txt","r"); 
    if(file==NULL){
        printf("Error: File is not opening!\n");
        return;
    }
    FILE *temprory_file=fopen("temp.txt","w");
    if(temprory_file==NULL){
        printf("Error: Temporary file is not created!\n");
        fclose(file);
        return;
    }
    char user_id[100];
    int id_to_check,found_id=0;
    struct User user;
    getchar();
    while(1){
        printf("Enter the ID of the user to update: ");
        scanf("%[^\n]s",user_id);
        if(is_digit(user_id)){
            break;
        }
        else{
            printf("Error: User ID must contain only positive integer!\n");
        }
        while (getchar()!='\n');
    }
    id_to_check=string_to_integer(user_id);
    getchar();
    while(fscanf(file,"%d\t%[^\t]\t%d",&user.id,user.name,&user.age)!=EOF){
        if(user.id==id_to_check){
            char user_age[100];
            while(1){
                printf("Enter new name: ");
                scanf("%[^\n]s",user.name);
                if(is_alphabet(user.name)){
                    break;
                }
                else{
                    printf("Error: Name must contain only alphabets!\n");
                }
                while(getchar()!='\n');
            }
            getchar();
            while(1){
                printf("Enter new Age: ");
                scanf("%[^\n]s",user_age);
                if(is_digit(user_age)){
                    break;
                }
                else{
                    printf("Error: User Age must contain only positive integer.\n");
                }
                while (getchar()!='\n');
            }
            user.age=string_to_integer(user_age);
            if(user.age<=0){
                printf("Error: User age must be positive and greator then zero.\n");
                fclose(file);
                return;
            }
            found_id=1;
        }
        fprintf(temprory_file,"%d\t%s\t%d\n",user.id,user.name,user.age);
    }
    fclose(file);
    fclose(temprory_file);
    if(found_id){
        remove("users.txt");
        rename("temp.txt","users.txt");
        printf("User updated successfully!\n");
    }
    else{
        printf("User with ID %d not found!\n",user_id);
        remove("temp.txt");
    }
}
void delete_user() {
    FILE *file=fopen("users.txt","r");
    if(file==NULL){
        printf("Error: File is not opening!\n");
        return;
    }
    FILE *temp_file=fopen("temp.txt","w");
    if(temp_file==NULL){
        printf("Error: Temporary file is not created!\n");
        fclose(file);
        return;
    }
    char user_id[100];
    int id_to_check,found_id=0;
    struct User user;
    getchar();
    while(1){
        printf("Enter the ID of the user to update: ");
        scanf("%[^\n]s",user_id);
        if(is_digit(user_id)){
            break;
        }
        else{
            printf("Error: User ID must contain only positive integer.!\n");
        }
        while (getchar()!='\n');
    }
    id_to_check=string_to_integer(user_id);
    getchar();
    while(fscanf(file,"%d\t%[^\t]\t%d",&user.id,user.name,&user.age)!=EOF){
        if(user.id!=id_to_check){
            fprintf(temp_file,"%d\t%s\t%d\n",user.id,user.name,user.age);
        }else{
            found_id=1;
        }
    }
    fclose(file);
    fclose(temp_file);
    if(found_id){
        remove("users.txt");
        rename("temp.txt","users.txt");
        printf("User deleted successfully!\n");
    }else{
        printf("User with ID %d not found!\n", user_id);
        remove("temp.txt");
    }
}

int main(){
    char input_choice[100];
    int choice;
    do {
        printf("\n--- User Management ---\n");
        printf("1. Create User\n");
        printf("2. Read Users\n");
        printf("3. Update User\n");
        printf("4. Delete User\n");
        printf("5. Exit\n");
        while(1){
            printf("Enter your choice: ");
            scanf("%[^\n]s",input_choice);
            if(is_digit(input_choice)){
                break;
            }
            else{
                printf("Error: Choice must contain integer ranging from 1 - 5!\n");
            }
            while (getchar()!='\n');
        }
        choice=string_to_integer(input_choice);
        switch(choice){
            case 1:
                create_user();
                break;
            case 2:
                read_users();
                break;
            case 3:
                update_user();
                break;
            case 4:
                delete_user();
                break;
            case 5:
                printf("Exiting...\n");
                break;
            default:
                printf("Error: Invalid choice! Please try again!\n");
        }
        getchar();
    }while(choice!=5);
    return 0;
}
